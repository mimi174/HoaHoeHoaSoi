@page
@model HoaHoeHoaSoi.Pages.Shared.CartModel
@{
}
@if (TempData["SuccessMessage"] != null) {
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
<div class="container">
    @if (!ModelState.IsValid) {
        <div class="alert alert-danger" role="alert">
            <ul>
                @foreach (var modelState in ViewData.ModelState.Values) {
                    foreach (var error in modelState.Errors) {
                        <li>@error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }
</div>
<style>
    .remove-link {
        display: inline-block;
        padding: 10px 20px;
        background-color: #9D1030;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }

        .remove-link:hover {
            background-color: #771023;
        }

    .info-left {
        width: 40%;
    }

    .info-right {
        width: 50%;
    }

    .box-title {
        font-size: 2.5vw;
        color: #9D1030;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        padding: 0.4vw;
    }

    .text-box {
        width: 30vw;
        font-family: Courier;
        font-size: 1.2vw;
        color: #9D1030;
        background-color: #F6D8DC;
        border-color: #9D1030;
        border: 0.15vw solid;
        border-radius: 100px;
        padding: 0.5vw 1.5vw 0.5vw 1.5vw;
    }

    .text-header {
        border-bottom: solid;
        border-color: #9D1030;
        font-size: 2.2vw;
        color: #9D1030;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    }

    .text-header-total {
        border-top: solid;
        border-color: #9D1030;
        font-size: 2.2vw;
        color: #9D1030;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    }

    .btn-submit {
        border-radius: 30px;
        background-color: #9D1030;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        font-size: 1.6vw;
        border: none;
        color: white;
        padding: 0.5vw 2vw 0.5vw 2vw;
    }

    .products_cart {
        border-radius: 30px;
        background-color: #F6D8DC;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        font-size: 1.6vw;
        border-color: #9D1030;
        color: #9D1030;
        padding: 0.5vw 2vw 0.5vw 2vw;
        border: 0.15vw solid;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

<div class="container-fluid text-white" style="padding: 2vw; background-color: #9D1030; ">
    <p style="text-align: center; font-family: Courier; font-size: 4vw; font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif; padding:0 0 ">
        <b>IT'S TIME TO CHECK OUT !</b>
    </p>
</div>
<form id="orderForm" method="post">
    <div id="div-payment" class="container-fluid text-white" style="background-color: #F6D8DC; padding: 2% 10%; display: flex;">
        <div class="info-left">
            <div class="text-header">
                <p style="text-align: center; margin-bottom: 0.1vw;"><b>DELIVERY INFORMATION</b> </p>
            </div>
            <input type="hidden" id="currentQuantityInput" name="currentQuantity" value="0">

            <input type="hidden" id="totalAmountInput" name="totalAmount" value="0">

            <label class="box-title" for="name">Name</label><br>
            <center>
                <input class="text-box" type="text" id="name" name="name" required><br>
            </center>
            <label class="box-title" for="phone">Phone</label><br>
            <center>
                <input class="text-box" type="text" id="phone" name="phone" required><br>
            </center>
            <label class="box-title" for="address">Address</label><br>
            <center>
                <input class="text-box" type="text" id="address" name="address" required>
            </center>

        </div>

        <div style="width:10%"></div>

        <div class="info-right">
            <div class="text-header">
                <p style="text-align: center; margin-bottom: 0.1vw;"><b>LIST</b> </p>
            </div>
            <div style="height:1.5vw"></div>
            @if (Model.SelectedProducts != null) {
                @foreach (var product in Model.SelectedProducts) {
                    <div class="products_cart" data-product-id="@product.Id">
                        <div style="float:left;">
                            @product.Name
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <input style ="width:15%;margin-left: 20%;" type="number" class="quantity-input" value="1" min="1">
                            <span class="price">@product.Price$</span>
                            <a href="/Cart?handler=Delete&productId=@product.Id" class="remove-link">Remove</a>
                        </div>
                    </div>
                    <div style="padding:0.5vw"></div>
                }
            }
            <div class="text-header-total">
                <p style="text-align: right;">
                    <span style="float: left;"><b>TOTAL:</b></span>
                    <b><span id="totalAmount">0.00</span>$</b>
                </p>
            </div>
        </div>
    </div>

    <div id="div-payment" class="container-fluid text-white" style="background-color: #F6D8DC; padding: 2% 10%; display: flex;border:none">
        <center style="width:100%">
            <button type="submit" id="orderButton" form="orderForm" class="btn-submit"><b>ORDER NOW!</b></button>
        </center>
    </div>
</form>
<script>
    var productQuantities = {};
    updateTotalAmount();

    function updateTotalAmount() {
        var totalAmount = 0;
        var products = document.querySelectorAll('.products_cart');
        products.forEach(function (product) {
            var price = parseFloat(product.querySelector('.price').innerText.match(/[\d.]+/g)[0]);
            var quantity = parseInt(product.querySelector('.quantity-input').value);
            var productId = product.getAttribute('data-product-id');
            totalAmount += price * quantity;
            productQuantities[productId] = quantity;
        });
        document.getElementById('totalAmount').innerText = totalAmount.toFixed(2);
        var quantitiesArray = Object.values(productQuantities);
        var integerQuantities = quantitiesArray.filter(quantity => Number.isInteger(quantity));
        var quantityString = integerQuantities.join(',');
        document.getElementById('currentQuantityInput').value = quantityString;
        document.getElementById('totalAmountInput').value = totalAmount.toFixed(2);
    }

    var quantityInputs = document.querySelectorAll('.quantity-input');

    // Lưu Quantity vào Session Storage khi thay đổi
    function updateQuantityInSession(productId, quantity) {
        var productQuantities = JSON.parse(sessionStorage.getItem('productQuantities')) || {};
        productQuantities[productId] = quantity;
        sessionStorage.setItem('productQuantities', JSON.stringify(productQuantities));
    }

    // Cập nhật số lượng và lưu vào Session Storage khi số lượng thay đổi
    quantityInputs.forEach(function (input) {
        input.addEventListener('change', function () {
            var productId = input.parentElement.parentElement.getAttribute('data-product-id');

            console.log("Product ID:", productId);

            var currentQuantity = parseInt(input.value);
            currentQuantity = Math.max(1, currentQuantity);
            input.value = currentQuantity;
            updateQuantityInSession(productId, currentQuantity);
            updateTotalAmount();
        });
    });

    // Load Quantity từ Session Storage khi trang được tải
    function loadQuantityFromSession() {
        var productQuantities = JSON.parse(sessionStorage.getItem('productQuantities')) || {};
        console.log("productQuantities:", productQuantities);
        var quantityInputs = document.querySelectorAll('.quantity-input');
        quantityInputs.forEach(function (input) {
            var productId = input.parentElement.parentElement.getAttribute('data-product-id');
            if (productQuantities[productId]) {
                input.value = productQuantities[productId];
            }
        });
    }
    // Function to update user information in session storage
    function updateUserInfoInSession(nameValue, phoneValue, addressValue) {
        var userInfo = {
            name: nameValue,
            phone: phoneValue,
            address: addressValue
        };
        sessionStorage.setItem('userInfo', JSON.stringify(userInfo));
    }

    // Call the function to update user information when there's a change in any field
    var userInfoInputs = document.querySelectorAll('#name, #phone, #address');
    userInfoInputs.forEach(function (input) {
        input.addEventListener('change', function () {
            updateUserInfoInSession(document.getElementById('name').value,
                document.getElementById('phone').value,
                document.getElementById('address').value);
        });
    });

    // Load user information from session storage
    function loadUserInfoFromSession() {
        var userInfo = JSON.parse(sessionStorage.getItem('userInfo'));
        if (userInfo) {
            document.getElementById('name').value = userInfo.name;
            document.getElementById('phone').value = userInfo.phone;
            document.getElementById('address').value = userInfo.address;
        }
    }

    // Gọi hàm loadQuantityFromSession, loadUserInfoFromSession khi trang được tải
    window.addEventListener('load', function () {
        loadQuantityFromSession();
        loadUserInfoFromSession();
    });


    // Xử lý sự kiện khi nhấn vào nút Remove
    document.querySelectorAll('.remove-link').forEach(function (removeBtn) {
        removeBtn.addEventListener('click', async function (event) {
            var productId = removeBtn.parentElement.parentElement.getAttribute('data-product-id');

            // Cập nhật số lượng sản phẩm trong session
            await updateQuantityInSession(productId, 1);

            // Tải lại số lượng từ session
            loadQuantityFromSession();

            // Cập nhật tổng số tiền
            updateTotalAmount();
        });
    });


    // Xử lý sự kiện khi nhấn vào nút ORDER NOW!
    document.getElementById('orderButton').addEventListener('click', async function (event) {
        loadUserInfoFromSession();
        // Cập nhật số lượng trên trang và tổng số tiền
        loadQuantityFromSession();
        updateTotalAmount();

        // Submit form để đặt hàng
        var form = document.getElementById('orderForm');
        var formData = new FormData(form);

        // Lấy danh sách sản phẩm và cập nhật số lượng của từng sản phẩm về 1 trong phiên lưu trữ
        var products = document.querySelectorAll('.products_cart');
        products.forEach(async function (product) {
            var productId = product.getAttribute('data-product-id');

            // Cập nhật số lượng sản phẩm trong session
            await updateQuantityInSession(productId, 1);
            await updateUserInfoInSession('', '', '');
        });
    });


</script>

